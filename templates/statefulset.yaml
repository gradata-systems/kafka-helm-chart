{{- $certDir := "/var/private/ssl" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: Parallel
  serviceName: {{ include "kafka.fullname" . }}
  selector:
    matchLabels:
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_OPTS
              value: "-Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty"
            - name: KAFKA_PORT
              value: {{ .Values.port | quote }}
            - name: HOSTNAME_COMMAND
              value: "hostname"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: {{ include "kafka.advertisedListeners" . | quote }}
            - name: KAFKA_LISTENERS
              value: {{ include "kafka.listeners" . | quote }}
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: {{ include "kafka.listenerSecurityProtocolMap" . | quote }}
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_CREATE_TOPICS
              value: {{ include "kafka.createTopics" . | trimSuffix "," }}
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: {{ .Values.zookeeper.connectionString | quote }}
            {{- if .Values.zookeeper.tls.enabled }}
            - name: KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE
              value: "true"
            - name: KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION
              value: {{ $certDir }}/truststore.jks
            - name: KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ toYaml .Values.certificate.keystorePasswordSecretRef | nindent 18 }}
            - name: KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION
              value: {{ $certDir }}/keystore.jks
            - name: KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ toYaml .Values.certificate.keystorePasswordSecretRef | nindent 18 }}
            {{- end }}
            - name: KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS
              value: {{ .Values.zookeeper.sessionTimeout | quote }}
            - name: KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: {{ .Values.zookeeper.connectionTimeout | quote }}
            - name: KAFKA_SSL_TRUSTSTORE_LOCATION
              value: {{ $certDir }}/truststore.jks
            - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ toYaml .Values.certificate.keystorePasswordSecretRef | nindent 18 }}
            - name: KAFKA_SSL_KEYSTORE_LOCATION
              value: {{ $certDir }}/keystore.jks
            - name: KAFKA_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ toYaml .Values.certificate.keystorePasswordSecretRef | nindent 18 }}
          ports:
            - name: kafka
              containerPort: {{ .Values.port }}
              protocol: TCP
            {{- if .Values.externalListener.enabled }}
            - name: kafka-external
              containerPort: {{ .Values.externalListener.containerPort }}
              protocol: TCP
            {{- end }}
          startupProbe:
            initialDelaySeconds: 3
            periodSeconds: 1
            timeoutSeconds: 3
            failureThreshold: 10
            tcpSocket:
              port: kafka
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            tcpSocket:
              port: kafka
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
            tcpSocket:
              port: kafka
          volumeMounts:
            - mountPath: /kafka
              subPath: data
              name: data
            - mountPath: /opt/kafka/logs
              subPath: log
              name: data
            - mountPath: {{ $certDir }}
              name: certs
              readOnly: true
            - mountPath: /opt/kafka/config/consumer.properties
              name: config
              subPath: consumer.properties
              readOnly: true
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
      volumes:
        - name: certs
          secret:
            secretName: {{ include "kafka.fullname" . }}-tls
        - name: config
          configMap:
            name: {{ include "kafka.fullname" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        {{- if .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- else }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "kafka.selectorLabels" . | nindent 20 }}
                topologyKey: kubernetes.io/hostname
              weight: 100
        {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "kafka.labels" . | nindent 10 }}
      spec:
        volumeName: {{ .Values.volumeClaim.volumeName | quote }}
        storageClassName: {{ .Values.volumeClaim.storageClassName | quote }}
        selector:
          {{- with .Values.volumeClaim.selector.matchLabels }}
          matchLabels:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeClaim.selector.matchExpressions }}
          matchExpressions:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.volumeClaim.dataSource }}
        dataSource:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.volumeClaim.accessModes }}
        accessModes:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.volumeClaim.volumeMode }}
        volumeMode:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.volumeClaim.resources.requests.storage }}
          limits:
            storage: {{ .Values.volumeClaim.resources.limits.storage }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: {{ .Values.port }}
      targetPort: kafka
      protocol: TCP
      name: kafka
  selector:
    {{- include "kafka.selectorLabels" . | nindent 4 }}
